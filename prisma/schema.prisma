generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Employee {
  id                       String        @id
  name                     String
  email                    String
  role                     String[]
  dob                      DateTime
  gender                   Gender        @default(MALE)
  supervisorId             Int?
  department               String?
  phoneNumber              String?
  address                  String?
  cidOrPassport            String?
  citenzenship             String?
  nationality              String?
  religion                 String?
  maritalStatus            MaritalStatus @default(SINGLE)
  bloodGroup               String?
  emergencyContactName     String?
  emergencyContactNumber   String?
  emergencyContactEmail    String?
  emergencyContactRelation String?
  emergencyContactAddress  String?
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  joinedDate               DateTime      @default(now())
  empLeave                    Leave[]     @relation("EmployeeToApprover")
  aprLeave                    Leave[]     @relation("ToApprover")
}

enum Gender {
  MALE
  FEMALE
}

enum MaritalStatus {
  SINGLE
  MARRIED
}

model Leave {
  id          String      @id @default(uuid())
  employeeId  String
  leaveTypeId Int
  startDate   DateTime
  endDate     DateTime
  reason      String
  status      LeaveStatus @default(PENDING)
  attachments String[]
  approverId  String
  receivedBy  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  leaveType   leaveType   @relation(fields: [leaveTypeId], references: [id])
  employee    Employee    @relation(name: "EmployeeToApprover", fields: [employeeId], references: [id])
  approver    Employee    @relation(name: "ToApprover", fields: [approverId], references: [id])
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  COMPLETED
}

model leaveType {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  allowDays   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  leaves      Leave[]
}
